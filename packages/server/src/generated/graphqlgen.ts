// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import {
  TodoEntry,
  TodoList,
  TodoEntryConnection,
  PageInfo,
  TodoEntryEdge,
  AggregateTodoEntry,
  TodoListConnection,
  TodoListEdge,
  AggregateTodoList,
  BatchPayload,
  TodoEntrySubscriptionPayload,
  TodoEntryPreviousValues,
  TodoListSubscriptionPayload,
  TodoListPreviousValues
} from './prisma-client'
import { Context } from '../utils'

type TodoEntryOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'done_ASC'
  | 'done_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
type TodoListOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface TodoEntryWhereUniqueInput {
    id: string | null
  }
  export interface TodoEntryWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    done: boolean | null
    done_not: boolean | null
    list: TodoListWhereInput | null
    AND: TodoEntryWhereInput[]
    OR: TodoEntryWhereInput[]
    NOT: TodoEntryWhereInput[]
  }
  export interface TodoListWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    entries_every: TodoEntryWhereInput | null
    entries_some: TodoEntryWhereInput | null
    entries_none: TodoEntryWhereInput | null
    AND: TodoListWhereInput[]
    OR: TodoListWhereInput[]
    NOT: TodoListWhereInput[]
  }
  export interface TodoListWhereUniqueInput {
    id: string | null
  }

  export interface ArgsTodoEntry {
    where: TodoEntryWhereUniqueInput
  }

  export interface ArgsTodoEntries {
    where: TodoEntryWhereInput | null
    orderBy: TodoEntryOrderByInput | null
    skip: number | null
    after: string | null
    before: string | null
    first: number | null
    last: number | null
  }

  export interface ArgsTodoEntriesConnection {
    where: TodoEntryWhereInput | null
    orderBy: TodoEntryOrderByInput | null
    skip: number | null
    after: string | null
    before: string | null
    first: number | null
    last: number | null
  }

  export interface ArgsTodoList {
    where: TodoListWhereUniqueInput
  }

  export interface ArgsTodoLists {
    where: TodoListWhereInput | null
    orderBy: TodoListOrderByInput | null
    skip: number | null
    after: string | null
    before: string | null
    first: number | null
    last: number | null
  }

  export interface ArgsTodoListsConnection {
    where: TodoListWhereInput | null
    orderBy: TodoListOrderByInput | null
    skip: number | null
    after: string | null
    before: string | null
    first: number | null
    last: number | null
  }

  export interface ArgsNode {
    id: string
  }

  export type TodoEntryResolver = (
    parent: undefined,
    args: ArgsTodoEntry,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry | null | Promise<TodoEntry | null>

  export type TodoEntriesResolver = (
    parent: undefined,
    args: ArgsTodoEntries,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry[] | Promise<TodoEntry[]>

  export type TodoEntriesConnectionResolver = (
    parent: undefined,
    args: ArgsTodoEntriesConnection,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntryConnection | Promise<TodoEntryConnection>

  export type TodoListResolver = (
    parent: undefined,
    args: ArgsTodoList,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList | null | Promise<TodoList | null>

  export type TodoListsResolver = (
    parent: undefined,
    args: ArgsTodoLists,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList[] | Promise<TodoList[]>

  export type TodoListsConnectionResolver = (
    parent: undefined,
    args: ArgsTodoListsConnection,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoListConnection | Promise<TodoListConnection>

  export type NodeResolver = (
    parent: undefined,
    args: ArgsNode,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => {} | null | Promise<{} | null>

  export interface Type {
    todoEntry: (
      parent: undefined,
      args: ArgsTodoEntry,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntry | null | Promise<TodoEntry | null>

    todoEntries: (
      parent: undefined,
      args: ArgsTodoEntries,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntry[] | Promise<TodoEntry[]>

    todoEntriesConnection: (
      parent: undefined,
      args: ArgsTodoEntriesConnection,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntryConnection | Promise<TodoEntryConnection>

    todoList: (
      parent: undefined,
      args: ArgsTodoList,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoList | null | Promise<TodoList | null>

    todoLists: (
      parent: undefined,
      args: ArgsTodoLists,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoList[] | Promise<TodoList[]>

    todoListsConnection: (
      parent: undefined,
      args: ArgsTodoListsConnection,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoListConnection | Promise<TodoListConnection>

    node: (parent: undefined, args: ArgsNode, ctx: Context, info: GraphQLResolveInfo) => {} | null | Promise<{} | null>
  }
}

export namespace TodoEntryResolvers {
  export const defaultResolvers = {
    id: (parent: TodoEntry) => parent.id,
    title: (parent: TodoEntry) => parent.title,
    done: (parent: TodoEntry) => parent.done
  }

  export type IdResolver = (
    parent: TodoEntry,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type TitleResolver = (
    parent: TodoEntry,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type DoneResolver = (
    parent: TodoEntry,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>

  export type ListResolver = (
    parent: TodoEntry,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList | Promise<TodoList>

  export interface Type {
    id: (parent: TodoEntry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    title: (parent: TodoEntry, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    done: (parent: TodoEntry, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>

    list: (parent: TodoEntry, args: {}, ctx: Context, info: GraphQLResolveInfo) => TodoList | Promise<TodoList>
  }
}

export namespace TodoListResolvers {
  export const defaultResolvers = {
    id: (parent: TodoList) => parent.id,
    title: (parent: TodoList) => parent.title
  }

  export interface TodoEntryWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    done: boolean | null
    done_not: boolean | null
    list: TodoListWhereInput | null
    AND: TodoEntryWhereInput[]
    OR: TodoEntryWhereInput[]
    NOT: TodoEntryWhereInput[]
  }
  export interface TodoListWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    entries_every: TodoEntryWhereInput | null
    entries_some: TodoEntryWhereInput | null
    entries_none: TodoEntryWhereInput | null
    AND: TodoListWhereInput[]
    OR: TodoListWhereInput[]
    NOT: TodoListWhereInput[]
  }

  export interface ArgsEntries {
    where: TodoEntryWhereInput | null
    orderBy: TodoEntryOrderByInput | null
    skip: number | null
    after: string | null
    before: string | null
    first: number | null
    last: number | null
  }

  export type IdResolver = (
    parent: TodoList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type TitleResolver = (
    parent: TodoList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type EntriesResolver = (
    parent: TodoList,
    args: ArgsEntries,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry[] | Promise<TodoEntry[]>

  export interface Type {
    id: (parent: TodoList, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    title: (parent: TodoList, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    entries: (
      parent: TodoList,
      args: ArgsEntries,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntry[] | Promise<TodoEntry[]>
  }
}

export namespace TodoEntryConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: TodoEntryConnection) => parent.pageInfo,
    edges: (parent: TodoEntryConnection) => parent.edges
  }

  export type PageInfoResolver = (
    parent: TodoEntryConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>

  export type EdgesResolver = (
    parent: TodoEntryConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntryEdge[] | Promise<TodoEntryEdge[]>

  export type AggregateResolver = (
    parent: TodoEntryConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AggregateTodoEntry | Promise<AggregateTodoEntry>

  export interface Type {
    pageInfo: (
      parent: TodoEntryConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>

    edges: (
      parent: TodoEntryConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntryEdge[] | Promise<TodoEntryEdge[]>

    aggregate: (
      parent: TodoEntryConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AggregateTodoEntry | Promise<AggregateTodoEntry>
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {
    hasNextPage: (parent: PageInfo) => parent.hasNextPage,
    hasPreviousPage: (parent: PageInfo) => parent.hasPreviousPage,
    startCursor: (parent: PageInfo) => (parent.startCursor === undefined ? null : parent.startCursor),
    endCursor: (parent: PageInfo) => (parent.endCursor === undefined ? null : parent.endCursor)
  }

  export type HasNextPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>

  export type HasPreviousPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>

  export type StartCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>

  export type EndCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>

  export interface Type {
    hasNextPage: (parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>

    hasPreviousPage: (parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>

    startCursor: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>

    endCursor: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }
}

export namespace TodoEntryEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: TodoEntryEdge) => parent.node,
    cursor: (parent: TodoEntryEdge) => parent.cursor
  }

  export type NodeResolver = (
    parent: TodoEntryEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry | Promise<TodoEntry>

  export type CursorResolver = (
    parent: TodoEntryEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export interface Type {
    node: (parent: TodoEntryEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => TodoEntry | Promise<TodoEntry>

    cursor: (parent: TodoEntryEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }
}

export namespace AggregateTodoEntryResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateTodoEntry) => parent.count
  }

  export type CountResolver = (
    parent: AggregateTodoEntry,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>

  export interface Type {
    count: (parent: AggregateTodoEntry, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
  }
}

export namespace TodoListConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: TodoListConnection) => parent.pageInfo,
    edges: (parent: TodoListConnection) => parent.edges
  }

  export type PageInfoResolver = (
    parent: TodoListConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>

  export type EdgesResolver = (
    parent: TodoListConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoListEdge[] | Promise<TodoListEdge[]>

  export type AggregateResolver = (
    parent: TodoListConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AggregateTodoList | Promise<AggregateTodoList>

  export interface Type {
    pageInfo: (
      parent: TodoListConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>

    edges: (
      parent: TodoListConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoListEdge[] | Promise<TodoListEdge[]>

    aggregate: (
      parent: TodoListConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AggregateTodoList | Promise<AggregateTodoList>
  }
}

export namespace TodoListEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: TodoListEdge) => parent.node,
    cursor: (parent: TodoListEdge) => parent.cursor
  }

  export type NodeResolver = (
    parent: TodoListEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList | Promise<TodoList>

  export type CursorResolver = (
    parent: TodoListEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export interface Type {
    node: (parent: TodoListEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => TodoList | Promise<TodoList>

    cursor: (parent: TodoListEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }
}

export namespace AggregateTodoListResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateTodoList) => parent.count
  }

  export type CountResolver = (
    parent: AggregateTodoList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>

  export interface Type {
    count: (parent: AggregateTodoList, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface TodoEntryCreateInput {
    title: string
    done: boolean | null
    list: TodoListCreateOneWithoutEntriesInput
  }
  export interface TodoListCreateOneWithoutEntriesInput {
    create: TodoListCreateWithoutEntriesInput | null
    connect: TodoListWhereUniqueInput | null
  }
  export interface TodoListCreateWithoutEntriesInput {
    title: string
  }
  export interface TodoListWhereUniqueInput {
    id: string | null
  }
  export interface TodoEntryUpdateInput {
    title: string | null
    done: boolean | null
    list: TodoListUpdateOneRequiredWithoutEntriesInput | null
  }
  export interface TodoListUpdateOneRequiredWithoutEntriesInput {
    create: TodoListCreateWithoutEntriesInput | null
    update: TodoListUpdateWithoutEntriesDataInput | null
    upsert: TodoListUpsertWithoutEntriesInput | null
    connect: TodoListWhereUniqueInput | null
  }
  export interface TodoListUpdateWithoutEntriesDataInput {
    title: string | null
  }
  export interface TodoListUpsertWithoutEntriesInput {
    update: TodoListUpdateWithoutEntriesDataInput
    create: TodoListCreateWithoutEntriesInput
  }
  export interface TodoEntryWhereUniqueInput {
    id: string | null
  }
  export interface TodoEntryUpdateManyMutationInput {
    title: string | null
    done: boolean | null
  }
  export interface TodoEntryWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    done: boolean | null
    done_not: boolean | null
    list: TodoListWhereInput | null
    AND: TodoEntryWhereInput[]
    OR: TodoEntryWhereInput[]
    NOT: TodoEntryWhereInput[]
  }
  export interface TodoListWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    entries_every: TodoEntryWhereInput | null
    entries_some: TodoEntryWhereInput | null
    entries_none: TodoEntryWhereInput | null
    AND: TodoListWhereInput[]
    OR: TodoListWhereInput[]
    NOT: TodoListWhereInput[]
  }
  export interface TodoListCreateInput {
    title: string
    entries: TodoEntryCreateManyWithoutListInput | null
  }
  export interface TodoEntryCreateManyWithoutListInput {
    create: TodoEntryCreateWithoutListInput[]
    connect: TodoEntryWhereUniqueInput[]
  }
  export interface TodoEntryCreateWithoutListInput {
    title: string
    done: boolean | null
  }
  export interface TodoListUpdateInput {
    title: string | null
    entries: TodoEntryUpdateManyWithoutListInput | null
  }
  export interface TodoEntryUpdateManyWithoutListInput {
    create: TodoEntryCreateWithoutListInput[]
    delete: TodoEntryWhereUniqueInput[]
    connect: TodoEntryWhereUniqueInput[]
    disconnect: TodoEntryWhereUniqueInput[]
    update: TodoEntryUpdateWithWhereUniqueWithoutListInput[]
    upsert: TodoEntryUpsertWithWhereUniqueWithoutListInput[]
    deleteMany: TodoEntryScalarWhereInput[]
    updateMany: TodoEntryUpdateManyWithWhereNestedInput[]
  }
  export interface TodoEntryUpdateWithWhereUniqueWithoutListInput {
    where: TodoEntryWhereUniqueInput
    data: TodoEntryUpdateWithoutListDataInput
  }
  export interface TodoEntryUpdateWithoutListDataInput {
    title: string | null
    done: boolean | null
  }
  export interface TodoEntryUpsertWithWhereUniqueWithoutListInput {
    where: TodoEntryWhereUniqueInput
    update: TodoEntryUpdateWithoutListDataInput
    create: TodoEntryCreateWithoutListInput
  }
  export interface TodoEntryScalarWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    done: boolean | null
    done_not: boolean | null
    AND: TodoEntryScalarWhereInput[]
    OR: TodoEntryScalarWhereInput[]
    NOT: TodoEntryScalarWhereInput[]
  }
  export interface TodoEntryUpdateManyWithWhereNestedInput {
    where: TodoEntryScalarWhereInput
    data: TodoEntryUpdateManyDataInput
  }
  export interface TodoEntryUpdateManyDataInput {
    title: string | null
    done: boolean | null
  }
  export interface TodoListUpdateManyMutationInput {
    title: string | null
  }

  export interface ArgsCreateTodoEntry {
    data: TodoEntryCreateInput
  }

  export interface ArgsUpdateTodoEntry {
    data: TodoEntryUpdateInput
    where: TodoEntryWhereUniqueInput
  }

  export interface ArgsUpdateManyTodoEntries {
    data: TodoEntryUpdateManyMutationInput
    where: TodoEntryWhereInput | null
  }

  export interface ArgsUpsertTodoEntry {
    where: TodoEntryWhereUniqueInput
    create: TodoEntryCreateInput
    update: TodoEntryUpdateInput
  }

  export interface ArgsDeleteTodoEntry {
    where: TodoEntryWhereUniqueInput
  }

  export interface ArgsDeleteManyTodoEntries {
    where: TodoEntryWhereInput | null
  }

  export interface ArgsCreateTodoList {
    data: TodoListCreateInput
  }

  export interface ArgsUpdateTodoList {
    data: TodoListUpdateInput
    where: TodoListWhereUniqueInput
  }

  export interface ArgsUpdateManyTodoLists {
    data: TodoListUpdateManyMutationInput
    where: TodoListWhereInput | null
  }

  export interface ArgsUpsertTodoList {
    where: TodoListWhereUniqueInput
    create: TodoListCreateInput
    update: TodoListUpdateInput
  }

  export interface ArgsDeleteTodoList {
    where: TodoListWhereUniqueInput
  }

  export interface ArgsDeleteManyTodoLists {
    where: TodoListWhereInput | null
  }

  export type CreateTodoEntryResolver = (
    parent: undefined,
    args: ArgsCreateTodoEntry,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry | Promise<TodoEntry>

  export type UpdateTodoEntryResolver = (
    parent: undefined,
    args: ArgsUpdateTodoEntry,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry | null | Promise<TodoEntry | null>

  export type UpdateManyTodoEntriesResolver = (
    parent: undefined,
    args: ArgsUpdateManyTodoEntries,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>

  export type UpsertTodoEntryResolver = (
    parent: undefined,
    args: ArgsUpsertTodoEntry,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry | Promise<TodoEntry>

  export type DeleteTodoEntryResolver = (
    parent: undefined,
    args: ArgsDeleteTodoEntry,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry | null | Promise<TodoEntry | null>

  export type DeleteManyTodoEntriesResolver = (
    parent: undefined,
    args: ArgsDeleteManyTodoEntries,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>

  export type CreateTodoListResolver = (
    parent: undefined,
    args: ArgsCreateTodoList,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList | Promise<TodoList>

  export type UpdateTodoListResolver = (
    parent: undefined,
    args: ArgsUpdateTodoList,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList | null | Promise<TodoList | null>

  export type UpdateManyTodoListsResolver = (
    parent: undefined,
    args: ArgsUpdateManyTodoLists,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>

  export type UpsertTodoListResolver = (
    parent: undefined,
    args: ArgsUpsertTodoList,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList | Promise<TodoList>

  export type DeleteTodoListResolver = (
    parent: undefined,
    args: ArgsDeleteTodoList,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList | null | Promise<TodoList | null>

  export type DeleteManyTodoListsResolver = (
    parent: undefined,
    args: ArgsDeleteManyTodoLists,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>

  export interface Type {
    createTodoEntry: (
      parent: undefined,
      args: ArgsCreateTodoEntry,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntry | Promise<TodoEntry>

    updateTodoEntry: (
      parent: undefined,
      args: ArgsUpdateTodoEntry,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntry | null | Promise<TodoEntry | null>

    updateManyTodoEntries: (
      parent: undefined,
      args: ArgsUpdateManyTodoEntries,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>

    upsertTodoEntry: (
      parent: undefined,
      args: ArgsUpsertTodoEntry,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntry | Promise<TodoEntry>

    deleteTodoEntry: (
      parent: undefined,
      args: ArgsDeleteTodoEntry,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntry | null | Promise<TodoEntry | null>

    deleteManyTodoEntries: (
      parent: undefined,
      args: ArgsDeleteManyTodoEntries,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>

    createTodoList: (
      parent: undefined,
      args: ArgsCreateTodoList,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoList | Promise<TodoList>

    updateTodoList: (
      parent: undefined,
      args: ArgsUpdateTodoList,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoList | null | Promise<TodoList | null>

    updateManyTodoLists: (
      parent: undefined,
      args: ArgsUpdateManyTodoLists,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>

    upsertTodoList: (
      parent: undefined,
      args: ArgsUpsertTodoList,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoList | Promise<TodoList>

    deleteTodoList: (
      parent: undefined,
      args: ArgsDeleteTodoList,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoList | null | Promise<TodoList | null>

    deleteManyTodoLists: (
      parent: undefined,
      args: ArgsDeleteManyTodoLists,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>
  }
}

export namespace BatchPayloadResolvers {
  export const defaultResolvers = {
    count: (parent: BatchPayload) => parent.count
  }

  export type CountResolver = (
    parent: BatchPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export interface Type {
    count: (parent: BatchPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {}

  export interface TodoEntrySubscriptionWhereInput {
    mutation_in: MutationType[]
    updatedFields_contains: string | null
    updatedFields_contains_every: string[]
    updatedFields_contains_some: string[]
    node: TodoEntryWhereInput | null
    AND: TodoEntrySubscriptionWhereInput[]
    OR: TodoEntrySubscriptionWhereInput[]
    NOT: TodoEntrySubscriptionWhereInput[]
  }
  export interface TodoEntryWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    done: boolean | null
    done_not: boolean | null
    list: TodoListWhereInput | null
    AND: TodoEntryWhereInput[]
    OR: TodoEntryWhereInput[]
    NOT: TodoEntryWhereInput[]
  }
  export interface TodoListWhereInput {
    id: string | null
    id_not: string | null
    id_in: string[]
    id_not_in: string[]
    id_lt: string | null
    id_lte: string | null
    id_gt: string | null
    id_gte: string | null
    id_contains: string | null
    id_not_contains: string | null
    id_starts_with: string | null
    id_not_starts_with: string | null
    id_ends_with: string | null
    id_not_ends_with: string | null
    title: string | null
    title_not: string | null
    title_in: string[]
    title_not_in: string[]
    title_lt: string | null
    title_lte: string | null
    title_gt: string | null
    title_gte: string | null
    title_contains: string | null
    title_not_contains: string | null
    title_starts_with: string | null
    title_not_starts_with: string | null
    title_ends_with: string | null
    title_not_ends_with: string | null
    entries_every: TodoEntryWhereInput | null
    entries_some: TodoEntryWhereInput | null
    entries_none: TodoEntryWhereInput | null
    AND: TodoListWhereInput[]
    OR: TodoListWhereInput[]
    NOT: TodoListWhereInput[]
  }
  export interface TodoListSubscriptionWhereInput {
    mutation_in: MutationType[]
    updatedFields_contains: string | null
    updatedFields_contains_every: string[]
    updatedFields_contains_some: string[]
    node: TodoListWhereInput | null
    AND: TodoListSubscriptionWhereInput[]
    OR: TodoListSubscriptionWhereInput[]
    NOT: TodoListSubscriptionWhereInput[]
  }

  export interface ArgsTodoEntry {
    where: TodoEntrySubscriptionWhereInput | null
  }

  export interface ArgsTodoList {
    where: TodoListSubscriptionWhereInput | null
  }

  export type TodoEntryResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsTodoEntry,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<TodoEntrySubscriptionPayload | null>
      | Promise<AsyncIterator<TodoEntrySubscriptionPayload | null>>
    resolve?: (
      parent: undefined,
      args: ArgsTodoEntry,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntrySubscriptionPayload | null | Promise<TodoEntrySubscriptionPayload | null>
  }

  export type TodoListResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsTodoList,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AsyncIterator<TodoListSubscriptionPayload | null> | Promise<AsyncIterator<TodoListSubscriptionPayload | null>>
    resolve?: (
      parent: undefined,
      args: ArgsTodoList,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoListSubscriptionPayload | null | Promise<TodoListSubscriptionPayload | null>
  }

  export interface Type {
    todoEntry: {
      subscribe: (
        parent: undefined,
        args: ArgsTodoEntry,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<TodoEntrySubscriptionPayload | null>
        | Promise<AsyncIterator<TodoEntrySubscriptionPayload | null>>
      resolve?: (
        parent: undefined,
        args: ArgsTodoEntry,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TodoEntrySubscriptionPayload | null | Promise<TodoEntrySubscriptionPayload | null>
    }

    todoList: {
      subscribe: (
        parent: undefined,
        args: ArgsTodoList,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<TodoListSubscriptionPayload | null>
        | Promise<AsyncIterator<TodoListSubscriptionPayload | null>>
      resolve?: (
        parent: undefined,
        args: ArgsTodoList,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TodoListSubscriptionPayload | null | Promise<TodoListSubscriptionPayload | null>
    }
  }
}

export namespace TodoEntrySubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: TodoEntrySubscriptionPayload) => parent.mutation,
    node: (parent: TodoEntrySubscriptionPayload) => parent.node,
    updatedFields: (parent: TodoEntrySubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: TodoEntrySubscriptionPayload) => parent.previousValues
  }

  export type MutationResolver = (
    parent: TodoEntrySubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationType | Promise<MutationType>

  export type NodeResolver = (
    parent: TodoEntrySubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntry | null | Promise<TodoEntry | null>

  export type UpdatedFieldsResolver = (
    parent: TodoEntrySubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>

  export type PreviousValuesResolver = (
    parent: TodoEntrySubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoEntryPreviousValues | null | Promise<TodoEntryPreviousValues | null>

  export interface Type {
    mutation: (
      parent: TodoEntrySubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationType | Promise<MutationType>

    node: (
      parent: TodoEntrySubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntry | null | Promise<TodoEntry | null>

    updatedFields: (
      parent: TodoEntrySubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>

    previousValues: (
      parent: TodoEntrySubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoEntryPreviousValues | null | Promise<TodoEntryPreviousValues | null>
  }
}

export namespace TodoEntryPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: TodoEntryPreviousValues) => parent.id,
    title: (parent: TodoEntryPreviousValues) => parent.title,
    done: (parent: TodoEntryPreviousValues) => parent.done
  }

  export type IdResolver = (
    parent: TodoEntryPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type TitleResolver = (
    parent: TodoEntryPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type DoneResolver = (
    parent: TodoEntryPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>

  export interface Type {
    id: (parent: TodoEntryPreviousValues, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    title: (
      parent: TodoEntryPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    done: (
      parent: TodoEntryPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>
  }
}

export namespace TodoListSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: TodoListSubscriptionPayload) => parent.mutation,
    node: (parent: TodoListSubscriptionPayload) => parent.node,
    updatedFields: (parent: TodoListSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: TodoListSubscriptionPayload) => parent.previousValues
  }

  export type MutationResolver = (
    parent: TodoListSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationType | Promise<MutationType>

  export type NodeResolver = (
    parent: TodoListSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoList | null | Promise<TodoList | null>

  export type UpdatedFieldsResolver = (
    parent: TodoListSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>

  export type PreviousValuesResolver = (
    parent: TodoListSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoListPreviousValues | null | Promise<TodoListPreviousValues | null>

  export interface Type {
    mutation: (
      parent: TodoListSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationType | Promise<MutationType>

    node: (
      parent: TodoListSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoList | null | Promise<TodoList | null>

    updatedFields: (
      parent: TodoListSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>

    previousValues: (
      parent: TodoListSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoListPreviousValues | null | Promise<TodoListPreviousValues | null>
  }
}

export namespace TodoListPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: TodoListPreviousValues) => parent.id,
    title: (parent: TodoListPreviousValues) => parent.title
  }

  export type IdResolver = (
    parent: TodoListPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type TitleResolver = (
    parent: TodoListPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export interface Type {
    id: (parent: TodoListPreviousValues, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    title: (
      parent: TodoListPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  TodoEntry: TodoEntryResolvers.Type
  TodoList: TodoListResolvers.Type
  TodoEntryConnection: TodoEntryConnectionResolvers.Type
  PageInfo: PageInfoResolvers.Type
  TodoEntryEdge: TodoEntryEdgeResolvers.Type
  AggregateTodoEntry: AggregateTodoEntryResolvers.Type
  TodoListConnection: TodoListConnectionResolvers.Type
  TodoListEdge: TodoListEdgeResolvers.Type
  AggregateTodoList: AggregateTodoListResolvers.Type
  Mutation: MutationResolvers.Type
  BatchPayload: BatchPayloadResolvers.Type
  Subscription: SubscriptionResolvers.Type
  TodoEntrySubscriptionPayload: TodoEntrySubscriptionPayloadResolvers.Type
  TodoEntryPreviousValues: TodoEntryPreviousValuesResolvers.Type
  TodoListSubscriptionPayload: TodoListSubscriptionPayloadResolvers.Type
  TodoListPreviousValues: TodoListPreviousValuesResolvers.Type
}
